const data = `010001110001
110100000001
111001001011
111100001000
000111101001
101111001001
111111000110
000101110010
001101001010
000110001101
011111111110
101100010001
110101100001
000000000110
010011000011
010101110010
011001001001
010011010111
001101010110
100000101000
011100110010
001011110001
101110110011
100011011101
000101111011
000010011000
110101101111
011010101100
111001011010
011100110011
000101000111
111000110101
110111010000
111110010001
010100100110
010001011010
101100100001
001000101010
011111010010
101011100110
100111010110
101000110100
011010110001
000010001000
100001110111
101001011100
100100001011
111010101110
001101101001
000111111100
011011111000
111111111011
101100011010
011101001001
111001001000
010101010001
100000011011
100110100011
010101110111
111110110000
000001011111
111110100111
000100101000
000100100011
000011110001
000001101101
011000001000
110111011010
010000011010
110101111011
110110000001
111101000100
101010100111
101110110001
000111110101
001010000100
010100000101
111110000010
110011001011
010011000101
010001101110
010001101000
110111000100
111000010010
010000000101
111110001100
100110000110
100100000011
011101101011
011001100010
110011111011
011001111000
110001001110
011111001000
100010001011
111001001101
100000110000
100000001000
011001011010
111110100011
100111000100
011000111010
011101001100
000110011001
101101111011
001101001011
100101111100
111001001110
010100011110
100101011010
110101110000
111101110110
001010101100
011010000011
110001010011
101000100011
110010111110
100000010100
101011100000
111110111000
000000100011
100010000100
011111001100
010100111011
101110001100
101101111100
011000101110
001010010010
011001011000
010011100001
011111111101
000001111011
011010110100
011001100000
111101000110
010110101001
011100001111
000000001110
110010110111
100110011101
101010000000
010100011111
110111001110
101100011000
101101101111
110110111001
101111111010
000011010101
000000001000
100011000110
000000110110
100011000001
110011111110
110001000101
110110100100
010001101010
110100000011
110100001010
000010110111
100011001010
001111111011
000110111010
011110001100
011110110000
100100110000
100011111110
100000000011
100101110010
101010110110
110000011001
101110111101
000110001000
001110111111
110000010001
100101111111
000001001001
111100101011
111110101110
000110000111
000000000001
110100101111
011010100110
000010110001
011000100111
110011010011
001101101010
000011111001
010110001111
110000011000
111010100000
011101110111
010001111001
100000111111
101110100111
000110001011
011110001110
100000000000
011010100000
100111100100
010011000001
100100011100
010010101100
100010101001
000101001110
001101011010
011100100111
001010100100
110010100000
100111110001
001111001000
111000101011
011011101001
110001011001
111011110111
110010000001
001011010010
001011011100
101000110001
011000010010
111011000110
001011110101
000111001001
110110100110
011101111111
111001101101
000100011110
100011101010
011111111011
011110110001
001010111111
100101001011
001101110110
100100000001
111000111001
000101100100
110011011000
101010011011
101100110111
111011011100
000011111110
101001101010
011000111100
001101010000
110000000011
100110011000
001000011100
010110100101
000111101100
110010111101
010010101010
001001001011
001010011011
111010101011
111111001110
011011110001
011101010101
011111110010
000111111110
000110110011
111100001101
000000100101
000010111111
111010100101
100101111000
000100101100
000111100010
001010010000
100100010001
100011000101
001000001010
001000000011
011100011010
101110011111
000011101101
111011010110
110100111011
101110110110
011110001011
111101001111`;

const parsedData = data.split("\n");
let stateObject = {
  ones: 0,
  zeros: 0,
};
let counter = 0;
let maxBinary = [];
let minBinary = [];
let maxDecimal;
let minDecimal;
for (let i = 0; i < parsedData.length; i++) {
  if (parsedData[i][counter] === "0") {
    stateObject.zeros += 1;
  }
  if (parsedData[i][counter] === "1") {
    stateObject.ones += 1;
  }
  if (i === parsedData.length - 1) {
    console.log(stateObject);
    if (stateObject.ones > stateObject.zeros) {
      maxBinary.push(1);
      minBinary.push(0);
    } else {
      maxBinary.push(0);
      minBinary.push(1);
    }
    counter++;
    i = -1;
    stateObject.ones = 0;
    stateObject.zeros = 0;
  }
  if (counter === 12) {
    maxDecimal = parseInt(maxBinary.join(""), 2);
    minDecimal = parseInt(minBinary.join(""), 2);
    return console.log(
      `Gamma Rate: ${maxDecimal} // Epsilon Rate: ${minDecimal}  \n// Power consumption ${
        maxDecimal * minDecimal
      }`
    );
  }
}
